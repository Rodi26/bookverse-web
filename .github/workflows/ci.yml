name: CI

env:
  DEMO_MODE: "false"

# NOTE: Manual trigger only during development phase
# Will be changed to automatic triggers (push/PR) when demo is ready
on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual CI trigger'
        required: false
        default: 'Manual testing'
        type: string
      DEMO_MODE:
        description: 'Enable demo mode (verbose logs, request tracing)'
        required: false
        default: 'false'
        type: choice
        options: ['false', 'true']

jobs:
  build-test-publish:
    name: CI
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      id-token: write
    outputs:
      build_name: ${{ steps.set-build-info.outputs.build_name }}
      build_number: ${{ steps.set-build-info.outputs.build_number }}
      app_version: ${{ steps.set-app-version.outputs.app_version }}

    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] DEMO_MODE"
        run: |
          DEMO="${{ inputs.DEMO_MODE || 'false' }}"
          if [ "$DEMO" = "true" ]; then
            echo "🔔 DEMO_MODE enabled"
            echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV
            echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV
            echo "HTTP_DEBUG_LEVEL=verbose" >> $GITHUB_ENV
            echo "BASH_XTRACE_ENABLED=1" >> $GITHUB_ENV
            echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
          else
            echo "DEMO_MODE disabled"
          fi

      - name: "[Setup] HTTP debug"
        run: |
          DEMO="${{ inputs.DEMO_MODE || 'false' }}"
          # HTTP_DEBUG_LEVEL: none|basic|verbose (default basic)
          case "${HTTP_DEBUG_LEVEL:-}" in
            none|basic|verbose)
              echo "HTTP_DEBUG_LEVEL=${HTTP_DEBUG_LEVEL}" >> $GITHUB_ENV ;;
            *)
              if [ "$DEMO" = "true" ]; then
                echo "HTTP_DEBUG_LEVEL=verbose" >> $GITHUB_ENV
              else
                echo "HTTP_DEBUG_LEVEL=basic" >> $GITHUB_ENV
              fi ;;
          esac

      - name: "[Info] Manual trigger"
        run: |
          DEMO="${{ inputs.DEMO_MODE || 'false' }}"
          echo "🚀 Manual CI trigger initiated"
          echo "📝 Reason: ${{ inputs.reason || 'Manual testing' }}"
          echo "🎛️ DEMO_MODE: ${DEMO}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date -u)"

      - name: "[Setup] Build Info"
        id: set-build-info
        run: |
          BUILD_NAME="${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}"
          BUILD_NUMBER="${{ github.run_number }}-${{ github.run_attempt }}"
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_name=$BUILD_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: "[Setup] Build variables"
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)
          REGISTRY_URL="${{ vars.DOCKER_REGISTRY }}"
          IMAGE_NAME="${REGISTRY_URL}/${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-docker-nonprod-local/${SERVICE_NAME}:${IMAGE_TAG}"
          DOCKER_REPO="${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-docker-nonprod-local"
          GENERIC_REPO="${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-generic-nonprod-local"

          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "DOCKER_REPO=$DOCKER_REPO" >> $GITHUB_ENV
          echo "GENERIC_REPO=$GENERIC_REPO" >> $GITHUB_ENV

      - name: "[Setup] JFrog CLI"
        # Temporary workaround: using forked action until upstream fix
        # uses: jfrog/setup-jfrog-cli@v4
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ steps.set-build-info.outputs.build_name }}
          JFROG_CLI_BUILD_NUMBER: ${{ steps.set-build-info.outputs.build_number }}
        with:
          version: latest
          oidc-provider-name: bookverse-web-github
          disable-job-summary: false
          disable-auto-build-publish: true
          disable-auto-evidence-collection: false
          oidc-audience: ${{ vars.JFROG_URL }}

      - name: "[Setup] Determine SemVer"
        id: set-app-version
        run: |
          set -euo pipefail
          if [ -f .github/scripts/http_debug.sh ]; then source .github/scripts/http_debug.sh; fi
          # Fallback minimal debug function (respects HTTP_DEBUG_LEVEL)
          if ! declare -f print_request_debug >/dev/null 2>&1; then
            print_request_debug() {
              local method="$1"; local url="$2"; local body="${3:-}"; local level="${HTTP_DEBUG_LEVEL:-basic}"
              [ "$level" = "none" ] && return 0
              local show_project_header=false
              # Allow forcing header via env var, otherwise infer from URL
              if [[ "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "true" || "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "1" ]]; then
                show_project_header=true
              else
                if [[ "$url" == *"/apptrust/api/"* ]]; then
                  if [[ "$url" == *"/promote"* || "$url" == *"/release"* ]]; then
                    show_project_header=false
                  else
                    show_project_header=true
                  fi
                fi
              fi
              local show_content_type=false
              if [[ "$method" == "POST" ]]; then
                show_content_type=true
              fi
              echo "---- Request debug (${level}) ----"
              echo "Method: ${method}"
              echo "URL: ${url}"
              echo "Headers:"
              echo "  Authorization: Bearer ***REDACTED***"
              if $show_project_header && [[ -n "${PROJECT_KEY:-}" ]]; then echo "  X-JFrog-Project: ${PROJECT_KEY}"; fi
              if $show_content_type; then echo "  Content-Type: application/json"; fi
              echo "  Accept: application/json"
              if [ -n "$body" ] && [ "$level" = "verbose" ]; then
                echo "Body: ${body}"
              fi
              echo "-----------------------"
            }
          fi
          SERVICE_NAME=${SERVICE_NAME:-$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')}
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "🔎 Resolving next SemVer for $APPLICATION_KEY"
          RESP_FILE=$(mktemp)
          # Use OIDC-authenticated JFrog CLI to query AppTrust API (no stored token)
          if jf rt curl -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" -H "Accept: application/json" \
               "/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=1&order_by=created&order_asc=false" > "$RESP_FILE" 2>/dev/null; then
            if LATEST_VERSION=$(jq -er '.versions[0].version // empty' "$RESP_FILE" 2>/dev/null); then
              :
            else
              echo "⚠️ Unexpected response from versions API; defaulting to 1.0.0"
              LATEST_VERSION=""
            fi
          else
            echo "⚠️ Failed to query AppTrust versions via OIDC; defaulting to 1.0.0"
            LATEST_VERSION=""
          fi
          rm -f "$RESP_FILE"
          if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "null" ]]; then
            MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
            PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3 | cut -d- -f1)
            APP_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            echo "⬆️ Latest=$LATEST_VERSION → Next=$APP_VERSION"
          else
            # Generate initial random SemVer: major 1-5, minor 1-50, patch 1-50
            MAJOR=$(( (RANDOM % 5) + 1 ))
            MINOR=$(( (RANDOM % 50) + 1 ))
            PATCH=$(( (RANDOM % 50) + 1 ))
            APP_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "🆕 No previous version, starting at $APP_VERSION (randomized)"
          fi
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          # Update image tag/name to use SemVer
          REGISTRY_URL=${REGISTRY_URL:-${{ vars.DOCKER_REGISTRY }}}
          IMAGE_TAG="$APP_VERSION"
          IMAGE_NAME="$REGISTRY_URL/${{ vars.PROJECT_KEY }}-$SERVICE_NAME-internal-docker-nonprod-local/$SERVICE_NAME:$IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV

      - name: Set canonical Build Info env (redundant outputs avoided)
        run: |
          BUILD_NAME="${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}"
          BUILD_NUMBER="${{ github.run_number }}-${{ github.run_attempt }}"
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      

      - name: "[Setup] Node"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: "[Build] Install deps"
        run: |
          npm ci --no-audit --fund=false

      - name: "[Build] Web assets"
        run: |
          npm run build --if-present

      - name: "[Artifacts] Web assets tar"
        run: |
          set -euo pipefail
          mkdir -p dist
          TAR_PATH="dist/web-assets-${APP_VERSION:-$IMAGE_TAG}.tar.gz"
          if [ -d "dist" ]; then
            tar -czf "$TAR_PATH" dist || true
          else
            echo "No dist directory to package; creating empty placeholder"
            mkdir -p empty && tar -czf "$TAR_PATH" empty
          fi
          jf rt upload "$TAR_PATH" "$GENERIC_REPO/$SERVICE_NAME/assets/${APP_VERSION:-$IMAGE_TAG}/" --flat=true --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          echo "✅ Uploaded web assets tarball to generic repo"

      - name: "[Build] Docker image"
        run: |
          set -euo pipefail
          # Use JFrog CLI to authenticate pushes without requiring docker login
          # Compute next per-image SemVer tag for web image
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          REPO_KEY="$DOCKER_REPO"
          IMG_NAME="$SERVICE_NAME"
          RESP=$(mktemp)
          # Query tags via OIDC-authenticated CLI (no stored token)
          if jf rt curl -H "Accept: application/json" "/artifactory/api/docker/$REPO_KEY/v2/$IMG_NAME/tags/list" > "$RESP" 2>/dev/null; then
            code=200
          else
            code=000
          fi
          last=""
          if [[ "$code" -ge 200 && "$code" -lt 300 ]]; then
            last=$(jq -r '[.tags[]? | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))] | sort_by([ (split(".")[0]|tonumber),(split(".")[1]|tonumber),(split(".")[2]|tonumber) ]) | (last // empty)' "$RESP")
          fi
          rm -f "$RESP"
          if [[ -n "$last" ]]; then IFS='.' read -r ma mi pa <<<"$last"; pa=$((pa+1)); WEB_IMAGE_TAG="$ma.$mi.$pa"; else WEB_IMAGE_TAG="$(( (RANDOM % 5) + 1 )).$(( (RANDOM % 50) + 1 )).$(( (RANDOM % 50) + 1 ))"; fi
          echo "WEB_IMAGE_TAG=$WEB_IMAGE_TAG" >> $GITHUB_ENV
          IMAGE_NAME="$REGISTRY_URL/$REPO_KEY/$IMG_NAME:$WEB_IMAGE_TAG"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          jf docker build --pull -t "$IMAGE_NAME" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER" .
          # TEMP: Artifactory < 7.33.3 doesn't support 'jf docker push'.
          # Re-enable the original push line below once Artifactory is upgraded.
          # jf docker push "$IMAGE_NAME" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          # Using deprecated fallback below: 'jf rt docker-push' (alias: 'jf rt dp').
          jf rt dp --project "${{ vars.PROJECT_KEY }}" "$IMAGE_NAME" "$DOCKER_REPO" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          echo "✅ Built and pushed Docker image (with build-info)"

      - name: "[Build Info] Publish"
        run: |
          jf rt bag --project "${{ vars.PROJECT_KEY }}" "$BUILD_NAME" "$BUILD_NUMBER"
          jf rt bce --project "${{ vars.PROJECT_KEY }}" "$BUILD_NAME" "$BUILD_NUMBER"
          jf rt bp --project "${{ vars.PROJECT_KEY }}" "$BUILD_NAME" "$BUILD_NUMBER"

      # Evidence Plan: Build subject – code-quality (UI)
      - name: "[Evidence] Prepare quality gate"
        run: |
          set -euo pipefail
          echo "📄 Preparing UI quality gate template"
          cat > quality-gate.template.md <<'EOF'
          # UI Quality Gate Report

          > ✅ Status: PASSED

          The project meets UI quality requirements (lint/tests placeholder for demo).

          ---

          ## Gate Details

          * **Analysis Tool**: `ESLint/Jest (demo)`
          * **Result**: `PASSED`
          * **Checked At (UTC)**: `${NOW_TS}`
          EOF

      - name: "[Evidence] Attach quality gate"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > quality-gate.json <<JSON
          {
            "qualityGate": {
              "tool": "ESLint/Jest (demo)",
              "status": "PASSED",
              "checkedAt": "${NOW_TS}"
            }
          }
          JSON
          export NOW_TS="${NOW_TS}"
          envsubst < quality-gate.template.md > quality-gate.md
          jf evd create-evidence \
            --predicate quality-gate.json \
            --markdown quality-gate.md \
            --predicate-type "https://sonarsource.com/evidence/quality-gate/v1" \
            --build-name "$BUILD_NAME" \
            --build-number "$BUILD_NUMBER" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" || echo "⚠️ UI quality gate evidence attachment failed"

      # Evidence Plan: Build subject – license-compliance (FOSSA)
      - name: "[Evidence] Prepare license template"
        run: |
          set -euo pipefail
          echo "📄 Preparing license compliance template"
          cat > license-evidence.template.md <<'EOF'
          # 🛡️ FOSSA License Compliance Report

          > ✅ Status: PASSED

          All software dependencies are in compliance with the project's license policies (demo placeholder).

          ---

          ## Scan Details

          * **Compliance Tool**: `FOSSA (demo)`
          * **Result**: `PASSED`
          * **Checked At (UTC)**: `${NOW_TS}`
          EOF

      - name: "[Evidence] Attach license compliance"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > license-evidence.json <<JSON
          {
            "licenseScan": {
              "tool": "FOSSA (demo)",
              "status": "PASSED",
              "checkedAt": "${NOW_TS}"
            }
          }
          JSON
          export NOW_TS="${NOW_TS}"
          envsubst < license-evidence.template.md > license-evidence.md
          jf evd create-evidence \
            --predicate license-evidence.json \
            --markdown license-evidence.md \
            --predicate-type "https://fossa.com/evidence/license-scan/v2.1" \
            --build-name "$BUILD_NAME" \
            --build-number "$BUILD_NUMBER" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" || echo "⚠️ License compliance evidence attachment failed"

  create-application-version:
    name: Create Version
    needs: build-test-publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      JFROG_CLI_SIGNING_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}

    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] JFrog CLI"
        # Temporary workaround: using forked action until upstream fix
        # uses: jfrog/setup-jfrog-cli@v4
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}-${{ github.run_attempt }}
        with:
          version: latest
          oidc-provider-name: bookverse-web-github
          disable-job-summary: false
          disable-auto-build-publish: true
          disable-auto-evidence-collection: false
          oidc-audience: ${{ vars.JFROG_URL }}

      - name: "[Setup] JFrog config"
        run: |
          # Prefer explicit admin context to avoid OIDC trust gaps for evidence API calls
          jf c add bookverse-admin --interactive=false --url "${{ vars.JFROG_URL }}" --access-token "${{ secrets.JFROG_ADMIN_TOKEN }}" || true
          jf c use bookverse-admin || true
          jf c show

      - name: "[Setup] AppTrust variables"
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          APP_VERSION=${{ needs.build-test-publish.outputs.app_version }}
          IMAGE_TAG="${APP_VERSION}"
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          BUILD_INFO_REPO="${{ vars.PROJECT_KEY }}-build-info"
          # Align with recommendations: recompute canonical build reference
          BUILD_NAME="${{ github.event.repository.name }}_${{ github.workflow }}_build-test-publish"
          BUILD_NUMBER="${{ github.run_number }}-${{ github.run_attempt }}"

          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "BUILD_INFO_REPO=$BUILD_INFO_REPO" >> $GITHUB_ENV
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

          echo "✅ AppTrust variables set:"
          echo "   📦 Application: $APPLICATION_KEY"
          echo "   🏷️ Version: $APP_VERSION"
          echo "   🔨 Build: $SERVICE_NAME#$IMAGE_TAG"

      - name: "[Diag] Build Info contents"
        run: |
          set -euo pipefail
          echo "🔎 Fetching build info to confirm artifacts are present"
          ENC_BUILD_NAME=$(printf '%s' "$BUILD_NAME" | jq -sRr @uri)
          ENC_BUILD_NUMBER=$(printf '%s' "$BUILD_NUMBER" | jq -sRr @uri)
          URL="${{ vars.JFROG_URL }}/artifactory/api/build/${ENC_BUILD_NAME}/${ENC_BUILD_NUMBER}?project=${{ vars.PROJECT_KEY }}"
          echo "GET $URL"
          curl -sS -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" -H "Accept: application/json" "$URL" \
            | jq '.buildInfo.modules // [] | map({id, artifacts: (.artifacts // [] | length)})'

      - name: "[Release] Create application version"
        run: |
          echo "🚀 Creating AppTrust application version: $APP_VERSION"

          # Determine application version tag - simulate real development environment
          # Array of realistic single tags for demo
          TAG_OPTIONS=(
            "release"
            "hotfix"
            "feature"
            "bugfix"
            "enhancement"
            "security"
            "performance"
            "refactor"
            "experimental"
            "maintenance"
            "integration"
            "documentation"
            "stable"
            "beta"
            "alpha"
            "critical"
            "patch"
            "minor"
            "major"
            "cleanup"
          )

          # Randomly select single tag based on run number for consistency
          TAG_INDEX=$((${GITHUB_RUN_NUMBER:-0} % ${#TAG_OPTIONS[@]}))
          APP_TAG="${TAG_OPTIONS[$TAG_INDEX]}"
          echo "🏷️ Application Version Tag (demo simulation): $APP_TAG"

          # Create application version with build sources
          APP_VERSION_PAYLOAD=$(cat << EOF
          {
            "version": "$APP_VERSION",
            "tag": "$APP_TAG",
            "sources": {
              "builds": [
                {
                  "name": "$BUILD_NAME",
                  "number": "$BUILD_NUMBER",
                  "repository_key": "$BUILD_INFO_REPO",
                  "include_dependencies": true
                }
              ]
            }
          }
          EOF
          )

          # Debug: show sanitized curl and payload
          echo "📦 Application Key: $APPLICATION_KEY"
          echo "📝 Payload:"; echo "$APP_VERSION_PAYLOAD" | jq . || echo "$APP_VERSION_PAYLOAD"
          # Source shared helper if available, with a robust fallback definition
          if [ -f .github/scripts/http_debug.sh ]; then source .github/scripts/http_debug.sh; fi
          if ! declare -f print_request_debug >/dev/null 2>&1; then
            print_request_debug() {
              local method="$1"; local url="$2"; local body="${3:-}"; local level="${HTTP_DEBUG_LEVEL:-basic}"
              [ "$level" = "none" ] && return 0
              local show_project_header=false
              if [[ "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "true" || "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "1" ]]; then
                show_project_header=true
              else
                if [[ "$url" == *"/apptrust/api/"* ]]; then
                  if [[ "$url" == *"/promote"* || "$url" == *"/release"* ]]; then
                    show_project_header=false
                  else
                    show_project_header=true
                  fi
                fi
              fi
              local show_content_type=false
              if [[ "$method" == "POST" ]]; then
                show_content_type=true
              fi
              echo "---- Request debug (${level}) ----"
              echo "Method: ${method}"
              echo "URL: ${url}"
              echo "Headers:"
              echo "  Authorization: Bearer ***REDACTED***"
              if $show_project_header && [[ -n "${PROJECT_KEY:-}" ]]; then echo "  X-JFrog-Project: ${PROJECT_KEY}"; fi
              if $show_content_type; then echo "  Content-Type: application/json"; fi
              echo "  Accept: application/json"
              if [ -n "$body" ] && [ "$level" = "verbose" ]; then
                echo "Body: ${body}"
              fi
              echo "-----------------------"
            }
          fi
          echo "🔗 Curl (sanitized): curl -X POST '${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?async=false' -H 'Authorization: Bearer ***' -H 'Content-Type: application/json' -H 'Accept: application/json' -d '<payload>'"
          DEBUG_INCLUDE_PROJECT_HEADER=false print_request_debug "POST" "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?async=false" "<payload>"

          # Ensure jq is present
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq >/dev/null; fi

          # Preflight: ensure the application exists; create if 404
          echo "🔍 Preflight: ensuring application '$APPLICATION_KEY' exists"
          if ! jf rt curl -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" -H "Accept: application/json" "/apptrust/api/v1/applications/$APPLICATION_KEY" >/dev/null 2>&1; then
            echo "🆕 Application not found; creating it"
            CREATE_APP_BODY=$(jq -n --arg name "BookVerse Web" --arg key "$APPLICATION_KEY" --arg proj "${{ vars.PROJECT_KEY }}" '{application_name:$name, application_key:$key, project_key:$proj}')
            jf rt curl -X POST -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" -H "Content-Type: application/json" -H "Accept: application/json" -d "$CREATE_APP_BODY" "/apptrust/api/v1/applications/" >/tmp/app_create.json 2>/tmp/app_create.err || true
            echo "📨 Create Application Response:"; cat /tmp/app_create.json || true
          fi

          # Create application version via AppTrust API using admin token (align with recommendations)
          RESP_BODY=$(mktemp)
          HTTP_STATUS=$(curl -sS -L -o "$RESP_BODY" -w "%{http_code}" -X POST \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?async=false" \
            -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" \
            -d "$APP_VERSION_PAYLOAD")
          echo "🔢 HTTP Status: $HTTP_STATUS"
          echo "📨 Response Body:"; cat "$RESP_BODY" || true; echo
          rm -f "$RESP_BODY"
          if [[ "$HTTP_STATUS" -lt 200 || "$HTTP_STATUS" -ge 300 ]]; then
            echo "❌ Failed to create application version" >&2
            exit 1
          fi

          # Robust validation: fetch content and require status == COMPLETED
          CONTENT_FILE=$(mktemp)
          CONTENT_STATUS=$(curl -sS -L -o "$CONTENT_FILE" -w "%{http_code}" \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/$APP_VERSION/content" \
            -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
            -H "Accept: application/json")
          if [[ "$CONTENT_STATUS" != "200" ]]; then
            echo "❌ Version content endpoint returned HTTP $CONTENT_STATUS for $APPLICATION_KEY@$APP_VERSION" >&2
            echo "📨 Response Body:"; cat "$CONTENT_FILE" || true; echo
            rm -f "$CONTENT_FILE"
            exit 1
          fi
          VERSION_STATE=$(jq -r '.status // empty' "$CONTENT_FILE" 2>/dev/null || echo "")
          echo "📨 Version Content:"; cat "$CONTENT_FILE" || true; echo
          rm -f "$CONTENT_FILE"
          if [[ "$VERSION_STATE" != "COMPLETED" ]]; then
            echo "❌ Application version not in COMPLETED state (status='$VERSION_STATE') for $APPLICATION_KEY@$APP_VERSION" >&2
            exit 1
          fi
          echo "✅ Application version created and validated (COMPLETED): $APPLICATION_KEY@$APP_VERSION"
          echo "📦 Packages will be automatically bound from build sources"

      # Evidence Plan: App UNASSIGNED – slsa-provenance and jira-tickets (gate to DEV)
      - name: "[Evidence] Prepare UNASSIGNED templates"
        run: |
          set -euo pipefail
          echo "📄 Preparing SLSA and Jira templates"
          cat > slsa.template.md <<'EOF'
          # SLSA Provenance Report 🛡️

          This document summarizes the SLSA (Supply-chain Levels for Software Artifacts) provenance and build context for this version.

          ---

          ## Evidence Details

          * **Framework**: `SLSA`
          * **SLSA Level**: `v1`
          * **Generated At**: `${NOW_TS}`
          * **Builder**: `GitHub Actions`
          * **Workflow**: `${{ github.workflow }}`
          * **Repository**: `${{ github.repository }}`
          * **Commit**: `${{ github.sha }}`
          EOF
          cat > jira.template.md <<'EOF'
          # 🎫 Jira Release Notes

          This evidence lists the Jira issues included in this application version.

          ---

          ## Tickets
          - ${T1} — ${T1_TYPE}
          - ${T2} — ${T2_TYPE}
          - ${T3} — ${T3_TYPE}
          EOF

      - name: "[Evidence] Attach UNASSIGNED (SLSA, Jira)"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          JFROG_CLI_SERVER_ID: bookverse-admin
        run: |
          # Force using the admin-configured JFrog server for evidence API calls
          SERVER_ID="${JFROG_CLI_SERVER_ID:-bookverse-admin}"
          jf c use "$SERVER_ID" || true
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          export NOW_TS="${NOW_TS}"
          # SLSA predicate and markdown
          cat > slsa.json <<JSON
          {
            "provenance": {
              "framework": "SLSA",
              "level": "v1",
              "generatedAt": "${NOW_TS}",
              "attachStage": "UNASSIGNED",
              "gateForPromotionTo": "DEV"
            }
          }
          JSON
          envsubst < slsa.template.md > slsa.md
          jf evd create-evidence \
            --predicate slsa.json \
            --markdown slsa.md \
            --predicate-type "https://slsa.dev/provenance/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"

          # Jira predicate and markdown
          # Generate a small set of pseudo tickets and types for the release notes
          T1="BV-$(( (${GITHUB_RUN_NUMBER:-0} % 200) + 100 ))"
          T2="BV-$(( ((${GITHUB_RUN_NUMBER:-0} + ${GITHUB_RUN_ATTEMPT:-0}) % 200) + 300 ))"
          T3="BV-$(( ((${GITHUB_RUN_NUMBER:-0} * 3 + ${GITHUB_RUN_ATTEMPT:-0}) % 200) + 500 ))"
          TYPES=(feature bug improvement)
          T1_TYPE="${TYPES[$(( ${GITHUB_RUN_NUMBER:-0} % 3 ))]}"
          T2_TYPE="${TYPES[$(( (${GITHUB_RUN_NUMBER:-0} + 1) % 3 ))]}"
          T3_TYPE="${TYPES[$(( (${GITHUB_RUN_NUMBER:-0} + 2) % 3 ))]}"
          export T1 T2 T3 T1_TYPE T2_TYPE T3_TYPE
          cat > jira.json <<JSON
          {
            "jira": {
              "tickets": [
                {"id": "${T1}", "type": "${T1_TYPE}"},
                {"id": "${T2}", "type": "${T2_TYPE}"},
                {"id": "${T3}", "type": "${T3_TYPE}"}
              ]
            }
          }
          JSON
          envsubst < jira.template.md > jira.md
          jf evd create-evidence \
            --predicate jira.json \
            --markdown jira.md \
            --predicate-type "https://atlassian.com/evidence/jira/release/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"

      - name: "[Evidence] Attach SDLC"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > sdlc-evidence.json <<JSON
          {
            "sdlc": {
              "version": "$APP_VERSION",
              "releaseDate": "${NOW_TS}",
              "actor": "${{ github.actor }}",
              "build": {"name": "$BUILD_NAME", "number": "$BUILD_NUMBER"},
              "qualityGates": {"unitTests": "passed", "lint": "passed", "securityScan": "passed"}
            }
          }
          JSON
          cat > sdlc-evidence.md <<EOF
          # SDLC Release Evidence

          **Application Version:** $APP_VERSION  
          **Build:** $BUILD_NAME#$BUILD_NUMBER  

          ## ✅ Quality Gates
          - Lint: Passed
          - Unit Tests: Passed
          - Security Scan: Passed
          EOF
          jf evd create-evidence \
            --predicate sdlc-evidence.json \
            --markdown sdlc-evidence.md \
            --predicate-type "SDLC Release" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" || echo "⚠️ SDLC evidence attachment failed"

      - name: "[Summary] AppTrust"
        run: |
          echo "## 🚀 AppTrust Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** \`$APPLICATION_KEY\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`$APP_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** \`$BUILD_NAME#$BUILD_NUMBER\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts Bound" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker image: \`$SERVICE_NAME:${WEB_IMAGE_TAG:-$IMAGE_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Web assets tar: \`$GENERIC_REPO/$SERVICE_NAME/assets/$APP_VERSION/web-assets-$APP_VERSION.tar.gz\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Evidence Added" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality (build)" >> $GITHUB_STEP_SUMMARY
          echo "- License Compliance (build)" >> $GITHUB_STEP_SUMMARY
          echo "- SLSA Provenance (release bundle)" >> $GITHUB_STEP_SUMMARY
          echo "- Jira Release Notes (release bundle)" >> $GITHUB_STEP_SUMMARY
          echo "- SDLC (release bundle)" >> $GITHUB_STEP_SUMMARY

