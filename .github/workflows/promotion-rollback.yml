name: Rollback

on:
  workflow_dispatch:
    inputs:
      rollback_to_version:
        description: 'Rollback to version (SemVer). Required.'
        required: true
        type: string
      target_stage:
        description: 'Target stage to rollback in'
        required: true
        default: 'DEV'
        type: choice
        options: [ DEV, QA, STAGING, PROD ]
      reason:
        description: 'Reason/notes for rollback'
        required: false
        default: 'Demo rollback'
        type: string

jobs:
  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] JFrog CLI (OIDC)"
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}-${{ github.run_attempt }}
        with:
          version: latest
          oidc-provider-name: bookverse-web-github
          disable-job-summary: false
          oidc-audience: ${{ vars.JFROG_URL }}

      - name: "[Setup] Export env"
        env:
          INPUT_ROLLBACK_TO: ${{ inputs.rollback_to_version }}
          INPUT_TARGET_STAGE: ${{ inputs.target_stage }}
          INPUT_REASON: ${{ inputs.reason }}
        run: |
          SERVICE_NAME=web
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          TARGET_STAGE="${INPUT_TARGET_STAGE:-DEV}"
          ROLLBACK_TO="$INPUT_ROLLBACK_TO"
          REGISTRY_URL="${{ vars.DOCKER_REGISTRY }}"
          DOCKER_REPO="${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-docker-nonprod-local"
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "TARGET_STAGE=$TARGET_STAGE" >> $GITHUB_ENV
          echo "ROLLBACK_TO=$ROLLBACK_TO" >> $GITHUB_ENV
          echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
          echo "DOCKER_REPO=$DOCKER_REPO" >> $GITHUB_ENV
          echo "ROLLBACK_REASON=${INPUT_REASON:-}" >> $GITHUB_ENV

      - name: "[Validate] Target"
        run: |
          if [ -z "$ROLLBACK_TO" ]; then echo "Missing rollback_to_version" >&2; exit 1; fi

      - name: "[Promote] Rollback to stage"
        run: |
          echo "Rolling back $APPLICATION_KEY to $ROLLBACK_TO in $TARGET_STAGE"
          curl -sS -L -X POST \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/$ROLLBACK_TO/promote?to=$TARGET_STAGE" \
            -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
            -H "Accept: application/json" --fail
          echo "✅ Rollback promote completed"

      - name: "[Tags] Enforce PROD 'latest' invariants"
        if: ${{ inputs.target_stage == 'PROD' }}
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          APP_KEY="$APPLICATION_KEY"
          BASE="${{ vars.JFROG_URL }}/apptrust/api/v1"
          TOKEN='${{ secrets.JFROG_ADMIN_TOKEN }}'
          RESP=$(mktemp)
          code=$(curl -sS -L -o "$RESP" -w "%{http_code}" \
            "$BASE/applications/$APP_KEY/versions?limit=1000&order_by=created&order_asc=false" \
            -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" || echo 000)
          if [[ "$code" -lt 200 || "$code" -ge 300 ]]; then
            echo "❌ Failed to list versions (HTTP $code)" >&2; cat "$RESP" || true; exit 1
          fi
          DESIRED=$(jq -r '[.versions[] | select((.release_status|tostring|ascii_upcase)=="RELEASED" or (.release_status|tostring|ascii_upcase)=="TRUSTED_RELEASE") | .version] | unique | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort_by(split(".")|map(tonumber)) | last // empty' "$RESP")
          if [[ -n "$DESIRED" ]]; then
            CURR_TAG=$(jq -r --arg v "$DESIRED" '.versions[] | select(.version==$v) | (.tag // "")' "$RESP")
            jq -n --arg ct "$CURR_TAG" '{tag:"latest", properties:{original_tag_before_latest:[$ct]}}' > body.json
            curl -sS -L -X PATCH "$BASE/applications/$APP_KEY/versions/$DESIRED" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d @body.json | cat
          fi
          mapfile -t OTHERS < <(jq -r --arg v "$DESIRED" '.versions[] | select(.tag=="latest" and .version!=$v) | .version' "$RESP")
          for ov in "${OTHERS[@]:-}"; do
            [ -z "$ov" ] && continue
            restore=$(jq -r --arg v "$ov" '.versions[] | select(.version==$v) | (.properties.original_tag_before_latest[0] // .version // "")' "$RESP")
            printf '{"tag":"%s","delete_properties":["original_tag_before_latest"]}' "$restore" > body.json
            curl -sS -L -X PATCH "$BASE/applications/$APP_KEY/versions/$ov" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d @body.json | cat
          done
          rm -f "$RESP" body.json || true

      - name: "[Evidence] Attach rollback"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > rollback-evidence.json <<JSON
          {
            "rollback": {
              "to": "$ROLLBACK_TO",
              "stage": "$TARGET_STAGE",
              "reason": "${ROLLBACK_REASON}",
              "actor": "${{ github.actor }}",
              "timestamp": "${NOW_TS}"
            }
          }
          JSON
          cat > rollback-evidence.md <<EOF
          # Rollback Evidence

          - Application: \`$APPLICATION_KEY\`
          - Rolled back to Version: \`$ROLLBACK_TO\`
          - Stage: \`$TARGET_STAGE\`
          - Actor: \`${{ github.actor }}\`
          - Timestamp (UTC): \`${NOW_TS}\`
          - Reason: \`${ROLLBACK_REASON:-N/A}\`
          EOF
          jf evd create-evidence \
            --predicate rollback-evidence.json \
            --markdown rollback-evidence.md \
            --predicate-type "https://jfrog.com/evidence/rollback/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$ROLLBACK_TO" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" || echo "⚠️ Rollback evidence attach failed"

      - name: "[Summary] Rollback"
        run: |
          echo "## ♻️ Rollback Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** \`$APPLICATION_KEY\`" >> $GITHUB_STEP_SUMMARY
          echo "**Rolled back to:** \`$ROLLBACK_TO\`" >> $GITHUB_STEP_SUMMARY
          echo "**Stage:** \`$TARGET_STAGE\`" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Repo:** \`$DOCKER_REPO\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Evidence" >> $GITHUB_STEP_SUMMARY
          echo "- Rollback evidence attached" >> $GITHUB_STEP_SUMMARY


