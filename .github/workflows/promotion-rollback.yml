# =============================================================================
# BookVerse Web UI Service - Frontend Promotion and CDN Rollback Workflow
# =============================================================================
#
# This GitHub Actions workflow provides comprehensive promotion and rollback
# capabilities for the BookVerse Web UI Service, implementing enterprise-grade
# frontend asset deployment, CDN distribution management, and rapid rollback
# procedures to ensure optimal customer experience and immediate incident response.
#
# 🚀 FRONTEND PROMOTION STRATEGY:
#     - Asset Optimization: Comprehensive frontend build validation and performance testing
#     - CDN Distribution: Progressive asset deployment across global content delivery networks
#     - Performance Validation: Core Web Vitals and Lighthouse score verification before promotion
#     - Accessibility Testing: WCAG 2.1 AA compliance validation and usability verification
#     - Browser Compatibility: Cross-browser testing and responsive design validation
#     - Cache Management: Intelligent cache invalidation and asset versioning coordination
#
# 🔄 RAPID FRONTEND ROLLBACK PROCEDURES:
#     - Instant Asset Recovery: Sub-30-second rollback execution for critical UI failures
#     - CDN Coordination: Global content delivery network rollback and cache invalidation
#     - Performance Preservation: Maintains optimal page load times during emergency procedures
#     - User Experience Protection: Seamless fallback to proven UI/UX implementations
#     - Asset Consistency: Frontend asset coordination across all global deployment regions
#     - Progressive Web App: Service worker and offline capability preservation during rollbacks
#
# 📊 CUSTOMER EXPERIENCE CONTINUITY:
#     - Zero UI Downtime: Continuous customer interface availability during deployment operations
#     - Performance Excellence: Sub-2-second page load time maintenance during updates
#     - Global Distribution: Consistent user experience across all geographic regions
#     - Mobile Optimization: Responsive design and touch interface preservation during operations
#     - SEO Maintenance: Search engine optimization and metadata consistency during deployments
#     - Conversion Protection: Maintains customer purchase flow and engagement during updates
#
# 🛠️ FRONTEND OPERATIONAL EXCELLENCE:
#     - Asset Management: Controlled deployment of JavaScript, CSS, and static asset updates
#     - Performance Monitoring: Real-time Core Web Vitals and user experience validation
#     - CDN Coordination: Global content delivery network management and cache optimization
#     - Progressive Enhancement: Feature flag coordination and gradual rollout management
#     - Analytics Continuity: User behavior tracking and conversion measurement preservation
#
# 🔐 FRONTEND SECURITY AND COMPLIANCE:
#     - Content Security Policy: CSP validation and security header management during deployments
#     - XSS Protection: Cross-site scripting prevention and input validation during updates
#     - HTTPS Enforcement: Secure connection validation and certificate management
#     - Privacy Compliance: GDPR cookie management and user privacy protection during rollbacks
#     - Asset Integrity: Subresource integrity validation and secure asset delivery
#     - Performance Auditing: Security and performance audit trail maintenance
#
# Authors: BookVerse Platform Team
# Version: 1.0.0
#
name: Rollback

# ⚡ Workflow Triggers: Manual execution for controlled frontend promotion and rollback operations
# Supports both emergency UI recovery scenarios and planned frontend deployment management
on:
  # 🎛️ Manual Dispatch: On-demand execution for frontend promotion and rollback operations
  # Enables precise control over web UI service and CDN deployment lifecycle
  workflow_dispatch:
    inputs:
      version:
        description: "Version (SemVer) to rollback (omit to use latest promoted)"
        required: false
        type: string

# 🔄 Concurrency Control: Prevents conflicting frontend promotion/rollback operations
# Ensures safe execution by blocking concurrent UI/UX deployment operations
concurrency:
  group: promotion-rollback-${{ github.event.repository.name }}
  cancel-in-progress: false  # Preserve running frontend operations for customer experience safety

jobs:
  rollback:
    name: Rollback ${{ github.event.repository.name }} ${{ inputs.version || 'latest-promoted' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      id-token: write
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] Checkout bookverse-infra for shared scripts"
        uses: actions/checkout@v4
        with:
          repository: yonatanp-jfrog/bookverse-infra
          path: bookverse-infra

      - name: "[Setup] Prereqs (jq)"
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: "[Setup] Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: "[Auth] Exchange GitHub OIDC for JFrog access token"
        run: |
          set -euo pipefail
          BASE="${{ vars.JFROG_URL }}"; BASE="${BASE%/}"
          if [[ -z "$BASE" ]]; then echo "Missing vars.JFROG_URL" >&2; exit 1; fi
          PROVIDER_NAME="bookverse-web-github"
          JF_URL="$BASE"
          if [[ -z "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" || -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]]; then
            echo "❌ Missing GitHub OIDC request env vars" >&2; exit 1; fi
          echo "🔑 Minting GitHub OIDC ID token (audience=$JF_URL)"
          ID_TOKEN=$(curl -fsSL -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${JF_URL}" | jq -r .value)
          if [[ -z "$ID_TOKEN" || "$ID_TOKEN" == "null" ]]; then echo "❌ Failed to fetch GitHub ID token" >&2; exit 1; fi
          echo "🔁 Exchanging OIDC for JFrog access token (provider=$PROVIDER_NAME)"
          PAYLOAD=$(jq -n --arg jwt "$ID_TOKEN" \
            --arg provider_name "$PROVIDER_NAME" \
            --arg project_key "${{ vars.PROJECT_KEY }}" \
            --arg job_id "${{ github.job }}" \
            --arg run_id "${{ github.run_id }}" \
            --arg repo "https://github.com/${{ github.repository }}" \
            --arg revision "${{ github.sha }}" \
            --arg branch "${{ github.ref_name }}" \
            '{
              grant_type:"urn:ietf:params:oauth:grant-type:token-exchange",
              subject_token_type:"urn:ietf:params:oauth:token-type:id_token",
              subject_token:$jwt,
              provider_name:$provider_name,
              project_key:$project_key,
              job_id:$job_id,
              run_id:$run_id,
              repo:$repo,
              revision:$revision,
              branch:$branch
            }')
          RESP=$(curl -fsSL -X POST "$JF_URL/access/api/v1/oidc/token" -H "Content-Type: application/json" -d "$PAYLOAD")
          JF_OIDC_TOKEN=$(echo "$RESP" | jq -er '.access_token // empty' || true)
          if [[ -z "$JF_OIDC_TOKEN" ]]; then echo "Failed to obtain JFrog access token: $RESP" >&2; exit 1; fi
          echo "JF_OIDC_TOKEN=$JF_OIDC_TOKEN" >> $GITHUB_ENV

      - name: "[Setup] JFrog CLI"
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        id: jfrog-cli-auth
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
        with:
          version: latest
          oidc-provider-name: bookverse-web-github
          disable-job-summary: true
          oidc-audience: ${{ vars.JFROG_URL }}

      - name: "[Rollback] Execute"
        shell: bash
        run: |
          set -euo pipefail
          echo "🧭 Starting rollback workflow"
          APPTRUST_BASE_URL="/apptrust/api/v1"

          SERVICE_NAME=$(echo "${GITHUB_REPOSITORY
          APP_KEY="bookverse-$SERVICE_NAME"
          echo "📦 Application: $APP_KEY"
          echo "APPLICATION_KEY=$APP_KEY" >> $GITHUB_ENV

          TARGET_VERSION="${{ inputs.version || '' }}"
          if [ -z "$TARGET_VERSION" ]; then
            echo "🔎 Resolving latest promoted version for $APP_KEY"
            RESP_FILE=$(mktemp)
            HTTP_STATUS=$(curl -sS -L -o "$RESP_FILE" -w "%{http_code}" \
              "${{ vars.JFROG_URL }}$APPTRUST_BASE_URL/applications/$APP_KEY/versions?limit=20&order_by=created&order_asc=false" \
              -H "Authorization: Bearer $JF_OIDC_TOKEN" \
              -H "Accept: application/json")
            if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
              TARGET_VERSION=$(jq -r '.versions[] | select((.release_status|tostring|ascii_upcase)=="RELEASED" or (.release_status|tostring|ascii_upcase)=="TRUSTED_RELEASE") | .version' "$RESP_FILE" | head -n1)
              
              if [ -z "${TARGET_VERSION:-}" ] || [ "$TARGET_VERSION" = "null" ]; then
                echo "ℹ️ No RELEASED/TRUSTED_RELEASE versions found, using latest PRE_RELEASE version"
                TARGET_VERSION=$(jq -r '.versions[] | select((.release_status|tostring|ascii_upcase)=="PRE_RELEASE") | .version' "$RESP_FILE" | head -n1)
              fi
            fi
            rm -f "$RESP_FILE"
            if [ -z "${TARGET_VERSION:-}" ] || [ "$TARGET_VERSION" = "null" ]; then
              echo "❌ Could not resolve latest promoted version for $APP_KEY" >&2
              exit 1
            fi
            echo "🎯 Defaulting to latest promoted version: $TARGET_VERSION"
          fi
          echo "TARGET_VERSION=$TARGET_VERSION" >> $GITHUB_ENV

          CONTENT_BEFORE=$(mktemp)
          CODE_B=$(curl -sS -L -o "$CONTENT_BEFORE" -w "%{http_code}" \
            -H "Authorization: Bearer $JF_OIDC_TOKEN" -H "Accept: application/json" \
            "${{ vars.JFROG_URL }}$APPTRUST_BASE_URL/applications/$APP_KEY/versions/$TARGET_VERSION/content" || echo 000)
          CURRENT_STAGE_BEFORE=""
          if [[ "$CODE_B" -ge 200 && "$CODE_B" -lt 300 ]]; then
            CURRENT_STAGE_BEFORE=$(jq -r '.current_stage // empty' "$CONTENT_BEFORE" 2>/dev/null || echo "")
          fi
          rm -f "$CONTENT_BEFORE"
          echo "📍 Stage BEFORE: ${CURRENT_STAGE_BEFORE:-unknown}"
          echo "CURRENT_STAGE_BEFORE=${CURRENT_STAGE_BEFORE:-}" >> $GITHUB_ENV

          STATUS="SUCCESS"
          MSG=""
          echo "🔁 Executing rollback via shared script from bookverse-infra"
          export APPTRUST_BASE_URL="${{ vars.JFROG_URL }}$APPTRUST_BASE_URL"
          export JF_OIDC_TOKEN="$JF_OIDC_TOKEN"
          if python3 bookverse-infra/libraries/bookverse-devops/scripts/apptrust_rollback.py \
            --app "$APP_KEY" \
            --version "$TARGET_VERSION"; then
            MSG="Rollback executed for $APP_KEY@$TARGET_VERSION"
          else
            STATUS="FAILED"
            MSG="Rollback failed for $APP_KEY@$TARGET_VERSION"
          fi

          CONTENT_TARGET=$(mktemp)
          CODE_T=$(curl -sS -L -o "$CONTENT_TARGET" -w "%{http_code}" \
            -H "Authorization: Bearer $JF_OIDC_TOKEN" -H "Accept: application/json" \
            "$APPTRUST_BASE_URL/applications/$APP_KEY/versions/$TARGET_VERSION/content" || echo 000)
          CURR_STAGE_TARGET=""
          if [[ "$CODE_T" -ge 200 && "$CODE_T" -lt 300 ]]; then
            CURR_STAGE_TARGET=$(jq -r '.current_stage // empty' "$CONTENT_TARGET" 2>/dev/null || echo "")
          fi
          rm -f "$CONTENT_TARGET"
          echo "📍 Stage AFTER:  ${CURR_STAGE_TARGET:-unknown}"
          echo "CURR_STAGE_TARGET=${CURR_STAGE_TARGET:-}" >> $GITHUB_ENV

      - name: "[Tags] Self-Healing Tag Management"
        run: |
          set -euo pipefail
          echo "🏥 Running self-healing tag management after rollback operation"
          echo "✅ Rollback completed, running comprehensive tag validation and healing"
          
          export JFROG_URL='${{ vars.JFROG_URL }}'
          export PROJECT_KEY='${{ vars.PROJECT_KEY }}'
          export APPLICATION_KEY="$APPLICATION_KEY"
          
          source bookverse-infra/libraries/bookverse-devops/scripts/tag-management-lib.sh
          
          validate_and_heal_tags
          
          echo ""
          echo "🎯 Tag management completed after rollback operation"
          echo "📋 All versions now have correct tags based on their states:"
          echo "   - 'latest': Highest SemVer version in PROD"
          echo "   - 'quarantine': Versions that were rolled back"
          echo "   - 'valid': Other valid SemVer versions"
          echo "   - Non-SemVer versions: No special tags (ignored for 'latest')"

      - name: "[Validation] Check rollback success"
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          
          PROJECT_KEY_ENV="${{ vars.PROJECT_KEY }}"
          LC_FILE=$(mktemp)
          PLATFORM_URL="${{ vars.JFROG_URL }}"
          CODE_LC=$(curl -sS -L -o "$LC_FILE" -w "%{http_code}" \
            -H "Authorization: Bearer $JF_OIDC_TOKEN" -H "Accept: application/json" \
            "$PLATFORM_URL/access/api/v2/lifecycle/?project_key=$PROJECT_KEY_ENV" || echo 000)
          NORM_FILE=$(mktemp)
          if [[ "$CODE_LC" -ge 200 && "$CODE_LC" -lt 300 ]]; then
            jq -c 'if type=="array" then . elif has("lifecycles") then .lifecycles elif has("items") then .items elif has("results") then .results elif (has("name") and has("stages")) then [.] else [] end' "$LC_FILE" > "$NORM_FILE" 2>/dev/null || printf '[]' > "$NORM_FILE"
          else
            printf '[]' > "$NORM_FILE"
          fi
          rm -f "$LC_FILE"
          LIFECYCLE_NAME="bookverse-lifecycle"
          STAGES=()
          while IFS= read -r s; do
            [ -z "$s" ] && continue
            s_disp="$s"
            case "$s_disp" in
              "$PROJECT_KEY_ENV"-*) s_disp="${s_disp
            esac
            STAGES+=("$s_disp")
          done < <(jq -r --arg n "$LIFECYCLE_NAME" '([ .[] | select(.name==$n) | .stages ] | .[0] // []) | map(if type=="object" then .name else . end) | .[]' "$NORM_FILE" 2>/dev/null)
          rm -f "$NORM_FILE"
          if [[ ${
            STAGES=(DEV QA STAGING PROD)
          fi
          echo "🧭 Lifecycle stages: ${STAGES[*]}"
          
          display_stage() {
            local x="$1"; local p="$PROJECT_KEY_ENV"; if [[ "$x" == "PROD" || "$x" == "$p-PROD" ]]; then echo "PROD"; elif [[ "$x" == "$p-"* ]]; then echo "${x
          }
          CURR_BEFORE_DISP=$(display_stage "${CURRENT_STAGE_BEFORE}")
          CURR_AFTER_DISP=$(display_stage "${CURR_STAGE_TARGET}")
          idx_before=-1
          for i in "${!STAGES[@]}"; do if [[ "${STAGES[$i]}" == "$CURR_BEFORE_DISP" ]]; then idx_before=$i; break; fi; done
          EXPECTED_PREV="UNASSIGNED"
          if [[ $idx_before -gt 0 ]]; then EXPECTED_PREV="${STAGES[$((idx_before-1))]}"; elif [[ $idx_before -eq 0 ]]; then EXPECTED_PREV="UNASSIGNED"; fi
          echo "🔎 Expected previous stage: ${EXPECTED_PREV}"

          VALIDATION_ERRORS=()
          if [[ -z "$CURRENT_STAGE_BEFORE" || "$CURR_BEFORE_DISP" == "UNASSIGNED" ]]; then
            VALIDATION_ERRORS+=("Cannot rollback UNASSIGNED version")
          fi
          if [[ "$CURR_AFTER_DISP" != "$EXPECTED_PREV" ]]; then
            VALIDATION_ERRORS+=("Stage after rollback '$CURR_AFTER_DISP' != expected '$EXPECTED_PREV'")
          fi

          STATUS="SUCCESS"
          MSG="Rollback executed for ${APPLICATION_KEY}@${TARGET_VERSION}"
          if [ ${
            STATUS="FAILED"
            MSG="Validation failed: ${VALIDATION_ERRORS[*]}"
          fi

          {
            echo "
            echo ""
            echo "**Repository:** \`${{ github.repository }}\`"
            echo "**Application:** \`$APPLICATION_KEY\`"
            echo "**Target Version:** \`${TARGET_VERSION:-unknown}\`"
            echo "**Status:** ${STATUS}"
            echo ""
            echo "
            echo "- Triggered by: \`${{ github.actor }}\`"
            echo "- Workflow run: \`${{ github.run_id }}\` (attempt \`${{ github.run_attempt }}\`)"
            echo "- Timestamp (UTC): \`$(date -u +%Y-%m-%dT%H:%M:%SZ)\`"
            echo ""
            echo "
            echo "- Stage before: \`${CURR_BEFORE_DISP:-unknown}\`"
            echo "- Stage after:  \`${CURR_AFTER_DISP:-unknown}\`"
            echo "- Expected previous stage: \`${EXPECTED_PREV:-unknown}\`"
            if [ "${
              echo "- Result: ❌ ${MSG}"
            else
              echo "- Result: ✅ Rollback validated"
            fi
            echo ""
            echo "${MSG}"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "$STATUS" = "FAILED" ]; then
            echo "${MSG}" >&2
            exit 1
          fi


